  // -*- C++ -*- generated by wxGlade 0.6.3 on Sun Feb 28 15:10:07 2010

#include "MuxFrontendDialog.h"
#include <wx/config.h>
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <ctype.h>
#include <wx/arrimpl.cpp>
#include "wxs.h"

WX_DEFINE_OBJARRAY( StringPtrArray );

// begin wxGlade: ::extracode

// end wxGlade

// Resource identifiers
enum
{
  ID_CB_TRANS_COM_NAME = wxID_HIGHEST + 1,
  ID_CB_TRANS_COM_SPEED,
  ID_TEXTBOX_RFS_PATH,
  ID_BTN_CHOOSE_PATH,
  ID_TEXTBOX_SERMUX_PORT_1,
  ID_TEXTBOX_SERMUX_PORT_2,
  ID_TEXTBOX_SERMUX_PORT_3,
  ID_TEXTBOX_SERMUX_PORT_4,
  ID_BTN_START,
  ID_BTN_STOP,
  ID_BTN_CLEAR,
  ID_TEXTBOX_CONSOLE
};

// Configuration key names
#define CFG_KEY_TRANS_COM_NAME        "trans_com"
#define CFG_KEY_TRANS_COM_SPEED       "trans_speed"
#define CFG_KEY_RFS_PATH              "rfs_path"
#define CFG_KEY_SERMUX_PORT_1         "sermux_port_1"
#define CFG_KEY_SERMUX_PORT_2         "sermux_port_2"
#define CFG_KEY_SERMUX_PORT_3         "sermux_port_3"
#define CFG_KEY_SERMUX_PORT_4         "sermux_port_4"

// Baud rates
const long MuxFrontendDialog::bauds[] = { 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200, 230400 };

// External functions from the multiplexer
extern "C" int mux_init( int argc, char **argv );
extern "C" void* mux_thread( void* pdata );
extern "C" void mux_thread_stop();
extern "C" void mux_cleanup();
extern volatile int mux_thread_running;
extern "C" int mux_textctrl_init( unsigned count );
extern "C" void mux_textctrl_cleanup();

// *****************************************************************************
// Logging functions for logging to windows instead of console

#define LOG_MAX_MSGSIZE       512
// Logging levels
#define LOG_NONE        0
#define LOG_ALL         1

#define TEXTCTRL_BUF_SIZE         131072

static wxTextCtrl* log_win;
static char logmsg[ LOG_MAX_MSGSIZE + 1 ];
static int log_level;
static sem_t log_sem;

static void add_text_to_ctrl( wxTextCtrl *ctrl, wxString s )
{
    // HACK: Under Windows (using wxTE_RICH2) we have trouble ensuring that the last
    // entered line is really at the bottom of the screen. We jump through some
    // hoops to get this working.
 
    // Count number of newlines (i.e lines)
    int lines = 0;
    const char* cstr = s.c_str();
    for( ; *cstr ; ++cstr )
        if( *cstr == '\n' )
            ++lines;
 
    // Dance...
    ctrl->Freeze();                 // Freeze the window to prevent scrollbar jumping
    ctrl->AppendText( s );          // Add the text
    ctrl->ScrollLines( lines + 1 ); // Scroll down correct number of lines + one (the extra line is important for some cases!)
    ctrl->ShowPosition( ctrl->GetLastPosition() ); // Ensure the last line is shown at the very bottom of the window
    ctrl->Thaw();                   // Allow the window to redraw
}

static void log_set_win( wxTextCtrl *pwin )
{
  log_win = pwin;    
  sem_init( &log_sem, 0, 1 );
}

#if 0
extern "C" void log_init( int level )
{
  log_level = level;
}

extern "C" void log_msg( const char *msg, ... )
{
#if 0
  va_list va;
  
  if( log_level == LOG_ALL )
  {
    sem_wait( &log_sem );
    va_start( va, msg );
    logmsg[ 0 ] = logmsg[ LOG_MAX_MSGSIZE ] = '\0';
    vsnprintf( logmsg, LOG_MAX_MSGSIZE, msg, va );
    va_end( va );  
    log_win->SetDefaultStyle( wxTextAttr( *wxBLUE ) );
    add_text_to_ctrl( log_win, wxString( logmsg ) );
    sem_post( &log_sem );
  }
#endif
}

extern "C" void log_err( const char *msg, ... )
{
#if 0
  va_list va;
  
  sem_wait( &log_sem );
  va_start( va, msg );
  logmsg[ 0 ] = logmsg[ LOG_MAX_MSGSIZE ] = '\0';
  vsnprintf( logmsg, LOG_MAX_MSGSIZE, msg, va );
  va_end( va );
  log_win->SetDefaultStyle( wxTextAttr( *wxRED ) );
  add_text_to_ctrl( log_win, wxString( logmsg ) );
  sem_post( &log_sem );
#endif
}
#endif
            
static wxWindow *dest;
extern "C" void textctrl_put_char( int c )
{  
  if( c == '\r' )
    return;
  wxCommandEvent evt( wxEVT_TEXTCTRL_DATA );
  evt.SetInt( c );
  wxPostEvent( dest, evt );  
}

extern "C" void textctrl_get_char( int c );

//******************************************************************************
// Special editing class (gets chars only from eLua board, sends chars to eLua)

VirtualTextCtrl::VirtualTextCtrl( wxWindow* parent, wxWindowID id, const wxString& value, const wxPoint& pos, 
             const wxSize& size, long style, const wxValidator& validator, const wxString& name ):
  wxTextCtrl( parent, id, value, pos, size, style, validator, name )
{
}

void VirtualTextCtrl::OnChar( wxKeyEvent& event )
{
  int code = event.GetKeyCode();
  
  if( isprint( code ) )
    textctrl_get_char( code );
  else if( code == WXK_RETURN )
    textctrl_get_char( '\n' );
  else if( code == WXK_BACK )
    textctrl_get_char( 8 );
}
             
BEGIN_EVENT_TABLE(VirtualTextCtrl, wxTextCtrl)
  EVT_CHAR(VirtualTextCtrl::OnChar)
END_EVENT_TABLE();  

// *****************************************************************************
// Dialog implementation

MuxFrontendDialog::MuxFrontendDialog(wxWindow* parent, int id, const wxString& title, const wxArrayString& ports, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE | wxDIALOG_MODAL ),
    m_pConfig( NULL ),
    m_aPorts( ports ),
    m_fServerRunning( false ),
    m_timer( this, TIMER_ID ),
    m_pCmdLine( NULL)
{
    // begin wxGlade: MuxFrontendDialog::MuxFrontendDialog
    sizer_rfs_static_staticbox = new wxStaticBox(this, -1, _("RFS server path"));
    sizer_sermux_static_staticbox = new wxStaticBox(this, -1, _("Serial multiplexer configuration"));
    sizer_transport_static_staticbox = new wxStaticBox(this, -1, _("Transport setup"));
    label_3 = new wxStaticText(this, wxID_ANY, _("COM port name"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);
    const wxString *combo_tr_com_name_choices = NULL;
    combo_tr_com_name = new wxComboBox(this, ID_CB_TRANS_COM_NAME, wxT(""), wxDefaultPosition, wxDefaultSize, 0, combo_tr_com_name_choices, wxCB_DROPDOWN | wxCB_READONLY);
    label_4 = new wxStaticText(this, wxID_ANY, _("COM port speed"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);
    const wxString *combo_tr_com_speed_choices = NULL;
    combo_tr_com_speed = new wxComboBox(this, ID_CB_TRANS_COM_SPEED, wxT(""), wxDefaultPosition, wxDefaultSize, 0, combo_tr_com_speed_choices, wxCB_DROPDOWN | wxCB_READONLY);
    text_rfs_path = new wxTextCtrl(this, ID_TEXTBOX_RFS_PATH, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    button_rfs_choose = new wxButton(this, ID_BTN_CHOOSE_PATH, _("Choose path..."));
    label_1 = new wxStaticText(this, wxID_ANY, _("Port 1"), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE);
    label_2 = new wxStaticText(this, wxID_ANY, _("Port 2"), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE);
    label_5 = new wxStaticText(this, wxID_ANY, _("Port 3"), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE);
    label_6 = new wxStaticText(this, wxID_ANY, _("Port 4"), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE);
    text_vport_1 = new wxTextCtrl(this, ID_TEXTBOX_SERMUX_PORT_1, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_LEFT);
    text_vport_2 = new wxTextCtrl(this, ID_TEXTBOX_SERMUX_PORT_2, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_LEFT);
    text_vport_3 = new wxTextCtrl(this, ID_TEXTBOX_SERMUX_PORT_3, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_LEFT);
    text_vport_4 = new wxTextCtrl(this, ID_TEXTBOX_SERMUX_PORT_4, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_LEFT);
    button_exit = new wxButton(this, wxID_OK, _("Exit"));
    button_start = new wxButton(this, ID_BTN_START, _("Start server"));
    button_stop = new wxButton(this, ID_BTN_STOP, _("Stop server"));
    button_clear = new wxButton(this, ID_BTN_CLEAR, _("Clear console"));
    text_ctrl_1 = new VirtualTextCtrl(this, ID_TEXTBOX_CONSOLE, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_LINEWRAP|wxTE_RICH|wxTE_READONLY);
          
    set_properties();
    do_layout();
    // end wxGlade
    
    // Set transport serial port data
    for( unsigned i = 0; i < ports.GetCount(); i ++ )
      combo_tr_com_name->Append( ports[ i ] );
    
    // Set baud rates
    for( unsigned i = 0; i < sizeof( MuxFrontendDialog::bauds ) / sizeof( unsigned int ); i ++ )
      combo_tr_com_speed->Append( wxString::Format( "%ld", MuxFrontendDialog::bauds[ i ] ) );
    
    // Create configuration object and read configuration data
    m_pConfig = new wxConfig( wxT( "muxfe" ), wxT( "elua.org" ) );
    log_set_win( text_ctrl_1 );
    read_configuration_data();                
    set_all_button_states();
    set_all_vport_states();
    
    // Set text control attributes
    wxFont textFont(8, wxFONTFAMILY_MODERN, wxNORMAL, wxNORMAL, false );
    wxTextAttr attr( *wxBLACK, wxNullColour, textFont, wxTEXT_ALIGNMENT_DEFAULT );
    text_ctrl_1->SetDefaultStyle( attr );
    
    dest = this;
}

MuxFrontendDialog::~MuxFrontendDialog()
{
  write_configuration_data();
  delete m_pConfig;
}

BEGIN_EVENT_TABLE(MuxFrontendDialog, wxDialog)
  // begin wxGlade: MuxFrontendDialog::event_table
  EVT_BUTTON(ID_BTN_CHOOSE_PATH, MuxFrontendDialog::on_choose_path)
  EVT_BUTTON(ID_BTN_START, MuxFrontendDialog::on_start_server_button)
  EVT_BUTTON(ID_BTN_STOP, MuxFrontendDialog::on_stop_server)
  EVT_BUTTON(ID_BTN_CLEAR, MuxFrontendDialog::on_clear_console)            
  // end wxGlade
  EVT_TEXT(ID_TEXTBOX_SERMUX_PORT_1, MuxFrontendDialog::on_vport_changed)
  EVT_TEXT(ID_TEXTBOX_SERMUX_PORT_2, MuxFrontendDialog::on_vport_changed)
  EVT_TEXT(ID_TEXTBOX_SERMUX_PORT_3, MuxFrontendDialog::on_vport_changed)
  EVT_TEXT(ID_TEXTBOX_SERMUX_PORT_4, MuxFrontendDialog::on_vport_changed)
  EVT_TEXTCTRL_DATA( wxID_ANY, MuxFrontendDialog::on_textctrl_char)
  EVT_TIMER(TIMER_ID, MuxFrontendDialog::on_timer)
END_EVENT_TABLE();

void MuxFrontendDialog::on_textctrl_char(wxCommandEvent &event )
{
  int c = event.GetInt();
  
  if( c == 8 && log_win->GetLastPosition() > 0 )     
    log_win->Remove( log_win->GetLastPosition() - 1, log_win->GetLastPosition() );
  else
  {
    logmsg[ 0 ] = c;
    logmsg[ 1 ] = '\0';
    //log_win->SetDefaultStyle( wxTextAttr( *wxRED ) );
    //add_text_to_ctrl( log_win, wxString( logmsg ) );
    log_win->AppendText( wxString( logmsg ) );
  }
}

void MuxFrontendDialog::read_configuration_data()
{
  // Read com port name
  int selpos = 0;
  wxString port_name = m_pConfig->Read( CFG_KEY_TRANS_COM_NAME, wxT( "" ) );
  for( unsigned i = 0, ; i < m_aPorts.GetCount(); i ++ )
    if( m_aPorts[ i ].CmpNoCase( port_name ) == 0 )
    {
      selpos = i;
      break;
    }
  combo_tr_com_name->SetSelection( selpos );
  
  // Read com port speed
  int speedpos = 0;
  long speed_value = m_pConfig->Read( CFG_KEY_TRANS_COM_SPEED, 0L );
  for( unsigned i = 0; i < sizeof( MuxFrontendDialog::bauds ) / sizeof( unsigned int ); i ++ )
    if( MuxFrontendDialog::bauds[ i ] == speed_value )
    {
      speedpos = i;
      break;
    }
  combo_tr_com_speed->SetSelection( speedpos );
  
  // Read all the wxTextEdit strings
  text_rfs_path->ChangeValue( m_pConfig->Read( CFG_KEY_RFS_PATH, wxT( "C:\\" ) ) );
  text_vport_1->ChangeValue( m_pConfig->Read( CFG_KEY_SERMUX_PORT_1, wxT( "" ) ) );
  text_vport_2->ChangeValue( m_pConfig->Read( CFG_KEY_SERMUX_PORT_2, wxT( "" ) ) );
  text_vport_3->ChangeValue( m_pConfig->Read( CFG_KEY_SERMUX_PORT_3, wxT( "" ) ) );
  text_vport_4->ChangeValue( m_pConfig->Read( CFG_KEY_SERMUX_PORT_4, wxT( "" ) ) );      
}

void MuxFrontendDialog::write_configuration_data()
{
  m_pConfig->Write( CFG_KEY_TRANS_COM_NAME, combo_tr_com_name->GetValue() );
  long port_speed;
  combo_tr_com_speed->GetValue().ToLong( &port_speed );
  m_pConfig->Write( CFG_KEY_TRANS_COM_SPEED, port_speed );
  m_pConfig->Write( CFG_KEY_RFS_PATH, text_rfs_path->GetValue() );
  m_pConfig->Write( CFG_KEY_SERMUX_PORT_1, text_vport_1->GetValue() );
  m_pConfig->Write( CFG_KEY_SERMUX_PORT_2, text_vport_2->GetValue() );
  m_pConfig->Write( CFG_KEY_SERMUX_PORT_3, text_vport_3->GetValue() );
  m_pConfig->Write( CFG_KEY_SERMUX_PORT_4, text_vport_4->GetValue() );      
}

void MuxFrontendDialog::on_choose_path(wxCommandEvent &event)
{
  wxDirDialog rfs_path( this, wxT( "Choose RFS root directory" ), text_rfs_path->GetValue(), wxDD_NEW_DIR_BUTTON );
  if( rfs_path.ShowModal() == wxID_OK )
    text_rfs_path->SetValue( rfs_path.GetPath() );
}

void MuxFrontendDialog::set_all_vport_states( bool force_false )
{
  bool enflags[ NUM_MAX_VPORTS ];
  wxTextCtrl *text_ctrls[] = { text_vport_1, text_vport_2, text_vport_3, text_vport_4 };
  wxStaticText *static_ctrls[] = { label_1, label_2, label_5, label_6 };
  
  if( force_false )
  {
    for( unsigned i = 0; i < NUM_MAX_VPORTS; i ++ )
    {
      text_ctrls[ i ]->Enable( false );
      static_ctrls[ i ]->Enable( false );
    }
    return;
  }
  
  for( unsigned i = 0; i < NUM_MAX_VPORTS; i ++ )
    enflags[ i ] = true;
  for( unsigned i = 0; i < NUM_MAX_VPORTS - 1; i ++ )
    if( text_ctrls[ i ]->GetValue() == _T( "" ) )
    {
      for( unsigned j = i + 1; j < NUM_MAX_VPORTS; j ++ )
        enflags[ j ] = false;
      break;  
    }
  for( unsigned i = 0; i < NUM_MAX_VPORTS; i ++ )
  {
    text_ctrls[ i ]->Enable( enflags[ i ] );
    static_ctrls[ i ]->Enable( enflags[ i ] );
    if( false == enflags[ i ] )
      text_ctrls[ i ]->ChangeValue( wxT( "" ) );
  }
}

void MuxFrontendDialog::set_all_button_states()
{
  button_exit->Enable();
  button_clear->Enable();
  button_stop->Enable( m_fServerRunning );
  bool start_enabled = !m_fServerRunning && ( text_rfs_path->GetValue() != wxT( "" ) ) && ( text_vport_1 ->GetValue() != wxT( "" ) );
  button_start->Enable( start_enabled );
}

void MuxFrontendDialog::on_start_server_button(wxCommandEvent &event)
{
  int num_configured_vports = 0;
  wxTextCtrl *text_ctrls[] = { text_vport_1, text_vport_2, text_vport_3, text_vport_4 };
   
  for( unsigned i = 0; i < NUM_MAX_VPORTS; i ++ )
    if( text_ctrls[ i ]->GetValue() != wxT( "" ) )
      num_configured_vports ++;
  m_pCmdLine = new const char*[ 5 + num_configured_vports + 1 ];
  m_pCmdLine[ 0 ] = "mux";
  wxString *temp = new wxString( wxString::Format( wxT( "ser:%s,%s" ), combo_tr_com_name->GetValue().c_str(), combo_tr_com_speed->GetValue().c_str() ) );
  m_aProgArgs.Add( temp );
  m_pCmdLine[ 1 ] = temp->c_str();
  temp = new wxString( wxString::Format( wxT( "%s" ), combo_tr_com_speed->GetValue().c_str() ) );
  m_aProgArgs.Add( temp ); 
  m_pCmdLine[ 2 ] = temp->c_str();
  temp = new wxString( text_rfs_path->GetValue().c_str() );
  m_aProgArgs.Add( temp );
  m_pCmdLine[ 3 ] = temp->c_str();
  m_pCmdLine[ 4 ] = "wxTextCtrl";
  for( int i = 0; i < num_configured_vports; i ++ )
  {
    temp = new wxString( text_ctrls[ i ]->GetValue() );
    m_aProgArgs.Add( temp ); 
    m_pCmdLine[ i + 5 ] = temp->c_str();
  }
  m_pCmdLine[ 5 + num_configured_vports ] = "-v";
  // Dump arguments
#if 0  
  text_ctrl_1->SetDefaultStyle( wxTextAttr( *wxBLACK ) );
  add_text_to_ctrl( text_ctrl_1, _( "[cmdline] " ) );  
  for( int i = 0; i < 4 + num_configured_vports + 1; i ++ )
  {
    add_text_to_ctrl( text_ctrl_1, m_pCmdLine[ i ] );
    add_text_to_ctrl( text_ctrl_1, wxT( " " ) );
  }
  add_text_to_ctrl( text_ctrl_1, wxT( "\n" ) );
#endif  
  on_server_started();
  if( mux_init( 5 + num_configured_vports + 1, ( char** )m_pCmdLine ) == 0 )
  {
    if( pthread_create( &m_mux_tid, NULL, mux_thread, NULL ) != 0 )
    {
      wxMessageBox( _( "Cannot create multiplexer thread" ), _( "Error" ) );
      on_server_stopped();
    }
  }                     
  else
    on_server_stopped();
}

void MuxFrontendDialog::on_server_started()
{
  m_fServerRunning = true;
  mux_thread_running = 1;   
  set_all_button_states(); 
  set_all_vport_states( true );
  // And transport configuration
  combo_tr_com_name->Disable();
  combo_tr_com_speed->Disable();
  // And RFS configuration
  button_rfs_choose->Disable();
  m_timer.Start( TIMER_PERIOD_MS );
  mux_textctrl_init( TEXTCTRL_BUF_SIZE ); 
}

void MuxFrontendDialog::on_server_stopped()
{
  m_fServerRunning = false;
  mux_thread_running = 0;
  mux_cleanup();
  mux_textctrl_cleanup();
  //text_ctrl_1->SetDefaultStyle( wxTextAttr( *wxBLACK ) );  
  //add_text_to_ctrl( text_ctrl_1, wxT( "Server stopped\n\n" ) );
  // Local cleanup
  if( m_pCmdLine )
  {
    delete m_pCmdLine;
    m_pCmdLine = NULL;
  }
  m_aProgArgs.Empty();
  set_all_button_states();
  set_all_vport_states();
  // Enable transport configuration
  combo_tr_com_name->Enable();
  combo_tr_com_speed->Enable();
  // And RFS configuration
  button_rfs_choose->Enable();    
  m_timer.Stop();
}

void MuxFrontendDialog::on_stop_server(wxCommandEvent &event)
{
  if( m_fServerRunning )
    mux_thread_stop();
}


void MuxFrontendDialog::on_clear_console(wxCommandEvent &event)
{
  text_ctrl_1->SetValue( wxT( "" ) );
}


// wxGlade: add MuxFrontendDialog event handlers

void MuxFrontendDialog::on_vport_changed(wxCommandEvent &event)
{
  set_all_vport_states();
  set_all_button_states();
}

void MuxFrontendDialog::on_timer(wxTimerEvent &event)
{
  if( !m_fServerRunning )
    return;
  if( mux_thread_running == 0 )
    on_server_stopped();
}

void MuxFrontendDialog::set_properties()
{
  // begin wxGlade: MuxFrontendDialog::set_properties
  SetTitle(_("eLua serial multiplexer frontend"));
  SetSize(wxDLG_UNIT(this, wxSize(478, 280)));
  label_3->SetFont(wxFont(8, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
  label_4->SetFont(wxFont(8, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
  button_rfs_choose->SetFont(wxFont(8, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
  label_1->SetFont(wxFont(8, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
  label_2->SetFont(wxFont(8, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
  label_5->SetFont(wxFont(8, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
  label_6->SetFont(wxFont(8, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
  // end wxGlade
}


void MuxFrontendDialog::do_layout()
{
  // begin wxGlade: MuxFrontendDialog::do_layout
  wxBoxSizer* sizer_6 = new wxBoxSizer(wxVERTICAL);
  wxBoxSizer* sizer_settings_and_buttons = new wxBoxSizer(wxHORIZONTAL);
  wxBoxSizer* sizer_buttons = new wxBoxSizer(wxVERTICAL);
  wxBoxSizer* sizer_11 = new wxBoxSizer(wxVERTICAL);
  wxStaticBoxSizer* sizer_sermux_static = new wxStaticBoxSizer(sizer_sermux_static_staticbox, wxHORIZONTAL);
  wxGridSizer* sizer_Sermux = new wxGridSizer(2, 4, 0, 0);
  wxBoxSizer* sizer_transport_and_rfs = new wxBoxSizer(wxHORIZONTAL);
  wxStaticBoxSizer* sizer_rfs_static = new wxStaticBoxSizer(sizer_rfs_static_staticbox, wxHORIZONTAL);
  wxBoxSizer* sizer_rfs = new wxBoxSizer(wxVERTICAL);
  wxStaticBoxSizer* sizer_transport_static = new wxStaticBoxSizer(sizer_transport_static_staticbox, wxHORIZONTAL);
  wxGridSizer* sizer_transport = new wxGridSizer(2, 2, 0, 0);
  sizer_transport->Add(label_3, 0, wxTOP|wxEXPAND, 2);
  sizer_transport->Add(combo_tr_com_name, 0, wxLEFT|wxEXPAND, 15);
  sizer_transport->Add(label_4, 0, wxTOP|wxEXPAND, 2);
  sizer_transport->Add(combo_tr_com_speed, 0, wxLEFT|wxEXPAND, 15);
  sizer_transport_static->Add(sizer_transport, 1, wxALL|wxEXPAND, 5);
  sizer_transport_and_rfs->Add(sizer_transport_static, 1, wxEXPAND, 0);
  sizer_rfs->Add(text_rfs_path, 0, wxEXPAND, 0);
  sizer_rfs->Add(button_rfs_choose, 0, wxTOP|wxEXPAND, 10);
  sizer_rfs_static->Add(sizer_rfs, 1, wxALL|wxEXPAND, 5);
  sizer_transport_and_rfs->Add(sizer_rfs_static, 1, wxLEFT|wxEXPAND, 10);
  sizer_11->Add(sizer_transport_and_rfs, 0, wxLEFT|wxRIGHT|wxTOP|wxEXPAND, 10);
  sizer_Sermux->Add(label_1, 0, wxEXPAND, 0);
  sizer_Sermux->Add(label_2, 0, wxLEFT|wxEXPAND, 5);
  sizer_Sermux->Add(label_5, 0, wxLEFT|wxEXPAND, 5);
  sizer_Sermux->Add(label_6, 0, wxLEFT|wxEXPAND, 5);
  sizer_Sermux->Add(text_vport_1, 0, wxEXPAND, 0);
  sizer_Sermux->Add(text_vport_2, 0, wxLEFT|wxEXPAND, 5);
  sizer_Sermux->Add(text_vport_3, 0, wxLEFT|wxEXPAND, 5);
  sizer_Sermux->Add(text_vport_4, 0, wxLEFT|wxEXPAND, 5);
  sizer_sermux_static->Add(sizer_Sermux, 1, wxALL|wxEXPAND, 5);
  sizer_11->Add(sizer_sermux_static, 0, wxALL|wxEXPAND, 10);
  sizer_settings_and_buttons->Add(sizer_11, 1, wxEXPAND, 0);
  sizer_buttons->Add(button_exit, 0, wxRIGHT|wxTOP|wxEXPAND, 10);
  sizer_buttons->Add(button_start, 0, wxRIGHT|wxTOP|wxEXPAND, 10);
  sizer_buttons->Add(button_stop, 0, wxRIGHT|wxTOP|wxEXPAND, 10);
  sizer_buttons->Add(button_clear, 0, wxRIGHT|wxTOP|wxEXPAND, 10);
  sizer_buttons->Add(20, 20, 1, wxEXPAND, 0);
  sizer_settings_and_buttons->Add(sizer_buttons, 0, wxTOP|wxEXPAND, 5);
  sizer_6->Add(sizer_settings_and_buttons, 0, wxEXPAND, 0);
  sizer_6->Add(text_ctrl_1, 1, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 10);
  SetSizer(sizer_6);
  Layout();
  // end wxGlade
}
